1.穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
2.要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
3.撤销工作区的修改，git checkout --name
4.撤销存入暂存区的文件 git reset head name
5.撤销commit的内容 git reset --head hard^//指定commitID
6.删除 ——确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：，最后删除
本地文件
7.撤销本地删除——，如果版本库还有，则git checkout --name一键还原。
8.创建ssh key
$ ssh-keygen -t rsa -C "youremail@example.com"
9.设置远程仓库 git remote add origin git@github.com:(account)/(origin name); 
9.推送到远程仓库 git push -u origin master;-u的作用是让本地与远程仓库进行连接。之后在push的时候就可以直接push.
10.删除远程仓库 git remote rm <name>
11.查看远程仓库 git remote -v

19.本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，

20.建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
12.创建分支 git switch -c name
13.查看分支 git branch
14.合并分支 git merge name 合并指定分支到当前分支。
15.删除分支 git branch -d name
16合并模式：
Fast forward模式
--no-ff——在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
 git merge --no-ff -m "merge with no-ff" dev 因为--no-ff模式会生成一次commit所以加上-m.

17.存储工作现场  ：git stash && git stash list
git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
git stash pop，恢复的同时把stash内容也删了
18.cherry-pick命令，让我们能复制一个特定的提交到当前分支

21. 创建标签 git tag name  ——每个tag对应一个commit
指定commitID打标签：$ git tag v0.9 f52c633
git show <tagname>查看标签
git tag -d v0.1 删除标签
git push origin <tagname>推送标签到远程
git push origin --tags推送所有标签到远程

删除远程和本地标签： git tag -d v0.9     git push origin :refs/tags/v0.9

